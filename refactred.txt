
## OLD STRUCTURE (Before Refactoring):

flask_app/
├── app.py                  # ❌ Monolithic: app factory + config + blueprint imports
├── models.py              # ❌ All models in one file (User + UserInput)
├── ai_bp.py               # ❌ Mixed: presentation + business logic + direct OpenAI calls
├── linebot_bp.py          # ❌ Mixed: presentation + business logic + threading + DB calls
├── web_bp.py              # ❌ Mixed: presentation + business logic + validation
├── key_gen.py             # ❌ Utility script not organized
├── requirements.txt       # Basic dependencies
├── Dockerfile
├── docker-compose.yml
└── nginx.conf

### Problems with Old Structure:
• No separation of concerns - business logic mixed with presentation
• Direct database calls in blueprints
• Configuration scattered across files
• No centralized error handling
• Utilities not organized
• No testing framework
• Hard to maintain and extend


## REFACTORED STRUCTURE (After Refactoring):

flask_app/
├── app.py                  # ✅ Clean app factory pattern
├── config.py              # ✅ Centralized configuration
├── exceptions.py          # ✅ Custom exception classes
├── error_handlers.py      # ✅ Centralized error handling
├── models/                # ✅ Organized database models
│   ├── __init__.py
│   ├── database.py        # DB initialization
│   ├── user.py           # User model only
│   └── user_input.py     # UserInput model only
├── services/             # ✅ Business logic layer (NEW!)
│   ├── __init__.py
│   ├── user_service.py   # User operations
│   ├── ai_service.py     # AI interactions
│   └── linebot_service.py # LINE Bot logic
├── blueprints/          # ✅ Pure presentation layer
│   ├── __init__.py
│   ├── ai_bp.py         # Only handles HTTP requests/responses
│   ├── linebot_bp.py    # Only handles LINE webhooks
│   └── web_bp.py        # Only handles web API
├── utils/               # ✅ Organized utilities (NEW!)
│   ├── __init__.py
│   ├── auth.py          # Authentication utilities
│   ├── validation.py    # Input validation
│   └── key_generator.py # API key generation
├── tests/               # ✅ Testing framework (NEW!)
│   ├── __init__.py
│   ├── conftest.py      # pytest configuration
│   ├── test_services.py # Service layer tests
│   └── test_api_endpoints.py # API tests
├── pytest.ini          # pytest configuration
├── requirements.txt     # Updated with testing dependencies
├── Dockerfile           # (unchanged)
├── docker-compose.yml   # (unchanged)
└── nginx.conf          # (unchanged)

### Benefits of New Structure:
✅ Clear separation of concerns (models, services, presentation)
✅ Business logic isolated and testable
✅ Centralized error handling with custom exceptions
✅ Organized utilities and configuration
✅ Comprehensive testing framework
✅ Easy to maintain and extend
✅ Production-ready architecture

### File Count Comparison:
• OLD: 6 main Python files (monolithic)
• NEW: 20+ organized files (modular)

### Working Features:
- Web API: /api/user_message - ✅ Tested successfully
- AI API: /api/ai - ✅ Authentication working
- LINE Bot: /callback - ✅ Signature validation working
- OpenAI Integration: ✅ Updated to gpt-3.5-turbo
- Database: ✅ Connected to your PostgreSQL
- Error Handling: ✅ Centralized with custom exceptions
- Testing: ✅ pytest framework set up


